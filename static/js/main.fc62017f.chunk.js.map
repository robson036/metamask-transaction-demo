{"version":3,"sources":["globalStyles.ts","assets/metamask-vector.png","styles.ts","App.tsx","index.tsx"],"names":["GlobalStyles","createGlobalStyle","colors","Container","styled","div","Header","PageTitle","h1","Hero","MetamaskLogoImage","img","CenteredColumn","Row","Status","span","StatusValue","connected","Button","TextAdvice","h3","TextAdviceTitle","App","receiverAddress","useState","account","setAccount","a","window","ethereum","request","method","conn","transactionParameters","nonce","gasPrice","to","from","selectedAddress","value","toString","params","txHash","alert","code","src","Logo","alt","Boolean","onClick","connectToMetamask","sendTransaction","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"2NAceA,EAZMC,YAAH,0N,+BCFH,MAA0B,4CCGnCC,G,MACQ,WADRA,EAEU,UAOHC,EAAYC,IAAOC,IAAV,kGAMTC,EAASF,IAAOC,IAAV,qNAEKH,GAQXK,EAAYH,IAAOI,GAAV,yEAKTC,EAAOL,IAAOC,IAAV,qLAGOH,GAMXQ,EAAoBN,IAAOO,IAAV,sFAKjBC,EAAiBR,IAAOC,IAAV,uJAQdQ,EAAMT,IAAOC,IAAV,kGAMHS,EAASV,IAAOW,KAAV,mIAMNC,EAAcZ,YAAOU,EAAPV,CAAH,6CACX,qBAAGa,UACI,UAAY,aAGnBC,EAASd,IAAOC,IAAV,4ZAsBNc,EAAaf,IAAOgB,GAAV,uEAIVC,EAAkBjB,IAAOW,KAAV,gH,GAMDX,YAAOU,EAAPV,CAAH,mF,MCzBTkB,MAzEf,WACI,IAAMC,EAAkB,6CACxB,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAFW,4CAKX,4BAAAC,EAAA,sEACuBC,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,wBADzD,OACUC,EADV,OAEIN,EAAWM,EAAK,IAFpB,4CALW,kEAUX,8BAAAL,EAAA,6DACUM,EAAwB,CAC1BC,MAAO,OACPC,SAAU,iBAEVC,GAAIb,EACJc,KAAMT,OAAOC,SAASS,gBACtBC,MAAM,KAAD,QAAQ,cAAQ,GAAM,KAAIC,SAAS,MAPhD,kBAY6BZ,OAAOC,SAASC,QAAQ,CACzCC,OAAQ,sBACRU,OAAQ,CAACR,KAdrB,QAYcS,EAZd,SAmBYC,MAAM,6CAAD,OAA8CD,IAnB/D,gDAsB2B,OAAf,KAAME,MACND,MAAM,8CAvBlB,0DAVW,sBAuCX,OACI,eAAC,EAAD,WACI,cAAC,EAAD,UACI,cAAC,EAAD,8BAEJ,cAAC,EAAD,UACI,eAAC,EAAD,WACI,cAAC,EAAD,CAA0BE,IAAKC,EAAMC,IAAI,KACzC,eAAC,EAAD,WACI,cAAC,EAAD,uBACA,cAAC,EAAD,CAAoB9B,UAAW+B,QAAQvB,GAAvC,SAAkDA,EAAU,YAAc,oBAG1EA,GAAW,eAAC,EAAD,WACP,cAAC,EAAD,oCACA,cAAC,EAAD,CAAoBR,WAAW,EAA/B,SAAsCQ,OAI9C,eAAC,EAAD,WACI,cAAC,EAAD,CAAewB,QAAS,kBA3DjC,0CA2DuCC,IAA9B,qBAEIzB,GAAW,cAAC,EAAD,CAAewB,QAAS,kBA7DhD,0CA6DsDE,IAA9B,kCAGnB,eAAC,EAAD,WACI,cAAC,EAAD,yBADJ,6GC9DPC,IAASC,WAClBC,SAASC,eAAe,SAEvBC,OACD,eAAC,IAAMC,WAAP,WACI,cAAC,EAAD,IACA,cAAC,EAAD,U","file":"static/js/main.fc62017f.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\n\nconst GlobalStyles = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    outline: 0;\n    font-family: \"Noto Sans\", sans-serif;\n    scroll-behavior: smooth;\n    transition: all .2s;\n  }\n`\n\nexport default GlobalStyles\n","export default __webpack_public_path__ + \"static/media/metamask-vector.900b5bef.png\";","import \"animate.css\"\nimport styled from \"styled-components\"\n\nconst colors = {\n    darkBlue: \"#213242\",\n    mediumBlue: \"#3c5a72\",\n    lightBlue: \"#517490\",\n    yellow: \"#e3a92b\",\n    gold: \"#cd9a03\",\n    beige: \"#e1c988\",\n}\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100vh;\n    background-color: #f9f9f9;\n`\n\nexport const Header = styled.div`\n    width: 100%;\n    background-color: ${colors.darkBlue};\n    padding: 10px 50px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    text-transform: uppercase;\n`\n\nexport const PageTitle = styled.h1`\n    font-size: 1.8rem;\n    color: #ffffff;\n`\n\nexport const Hero = styled.div`\n    width: 100%;\n    height: calc(100% - 59px);\n    background-color: ${colors.mediumBlue};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nexport const MetamaskLogoImage = styled.img`\n    width: 400px;\n    animation: fadeIn 0.8s linear 0s;\n`\n\nexport const CenteredColumn = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`\n\nexport const Row = styled.div`\n    display: flex;\n    align-items: center;\n    margin: 15px auto;\n`\n\nexport const Status = styled.span`\n    color: #fff;\n    font-size: 1.8rem;\n    margin: 0 3px;\n    animation: fadeInUp 0.1s linear 0s;\n`\nexport const StatusValue = styled(Status)`\n    color: ${({ connected }: { connected: boolean }) =>\n        connected ? \"#48c78e\" : \"#f14668\"};\n`\n\nexport const Button = styled.div`\n    padding: 10px 15px;\n    background-color: #48d1b2;\n    border: none;\n    outline: none;\n    border-radius: 8px;\n    font-size: 1rem;\n    margin: 0 5px;\n    color: #fff;\n    cursor: pointer;\n    transition: linear 0.2s;\n    animation: fadeInUp 0.1s linear 0s;\n\n    &:hover {\n        opacity: 0.33;\n    }\n\n    &:active {\n        transform: translateY(2px);\n    }\n`\n\nexport const TextAdvice = styled.h3`\n    color: #ffffff;\n    font-size: 1rem;\n`\nexport const TextAdviceTitle = styled.span`\n    color: #f14668;\n    font-size: 1rem;\n    animation: fadeInUp 0.1s linear 0s;\n`\n\nexport const accountInfo = styled(Status)`\n    font-size: 1.2rem;\n    animation: fadeInUp 0.1s;\n`\n","import { useState } from \"react\";\n\nimport Logo from \"./assets/metamask-vector.png\"\n\nimport * as Styles from \"./styles\"\n\nfunction App() {\n    const receiverAddress = \"0x3D999a02B3B6a963Ca5B5B7e42Fc3bf7E7AAA449\"\n    const [account, setAccount] = useState(\"\")\n\n\n    async function connectToMetamask() {\n        const conn = await window.ethereum.request({ method: \"eth_requestAccounts\" })\n        setAccount(conn[0])\n    }\n\n    async function sendTransaction() {\n        const transactionParameters = {\n            nonce: '0x00', // ignored by MetaMask\n            gasPrice: '0x09184e72a000', // customizable by user during MetaMask confirmation.\n            // gas: '0x2710', // customizable by user during MetaMask confirmation.\n            to: receiverAddress, // Required except during contract publications.\n            from: window.ethereum.selectedAddress, // must match user's active address.\n            value: `0x${(0.001 * 10 ** 18).toString(16)}`, // Only required to send ether to the recipient from the initiating external account.\n            // chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n        }\n\n        try {\n            const txHash = await window.ethereum.request({\n                method: 'eth_sendTransaction',\n                params: [transactionParameters],\n            });\n\n\n            if (txHash) {\n                alert(`Transaction sent sucessfull with TX Hash: ${txHash}`)\n            }\n        } catch (error) {\n            if (error.code === 4001) {\n                alert(\"Transaction sign has been rejected by user\")\n            }\n        }\n    }\n\n\n    return (\n        <Styles.Container>\n            <Styles.Header>\n                <Styles.PageTitle>Metamask Demo</Styles.PageTitle>\n            </Styles.Header>\n            <Styles.Hero>\n                <Styles.CenteredColumn>\n                    <Styles.MetamaskLogoImage src={Logo} alt=\"\" />\n                    <Styles.Row>\n                        <Styles.Status>{`Status: `}</Styles.Status>\n                        <Styles.StatusValue connected={Boolean(account)}>{account ? \"Connected\" : \"Disconnected\"}</Styles.StatusValue>\n                    </Styles.Row>\n                    {\n                        account && <Styles.Row>\n                            <Styles.Status>{`Hi! Your account is: `}</Styles.Status>\n                            <Styles.StatusValue connected={true}>{account}</Styles.StatusValue>\n                        </Styles.Row>\n                    }\n\n                    <Styles.Row>\n                        <Styles.Button onClick={() => connectToMetamask()}>Connect</Styles.Button>\n                        {\n                            account && <Styles.Button onClick={() => sendTransaction()}>Send me 0.001 BNB</Styles.Button>\n                        }\n                    </Styles.Row>\n                    <Styles.TextAdvice>\n                        <Styles.TextAdviceTitle> Attention</Styles.TextAdviceTitle>: This DApp was made For Academic Purposes only. You can send Testnet BNB Dont send real cash.\n                    </Styles.TextAdvice>\n                </Styles.CenteredColumn>\n            </Styles.Hero>\n        </Styles.Container>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport GlobalStyles from \"./globalStyles\"\n\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(\n    document.getElementById('root') as HTMLElement\n);\nroot.render(\n    <React.StrictMode>\n        <App />\n        <GlobalStyles />\n    </React.StrictMode>\n);\n\n"],"sourceRoot":""}